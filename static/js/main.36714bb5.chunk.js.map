{"version":3,"sources":["index.js"],"names":["MILLISECONDS","imageScaleFactor","outputStride","flipHorizontal","maxVideoSize","weight","initialPosition","App","state","top","left","oldTop","oldLeft","componentDidMount","_callee","_Users_aralroca_fish_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","wrap","_context","prev","next","posenet","_this","net","sent","initCapture","stop","this","isMobile","isAndroid","test","navigator","userAgent","isiOS","loadVideo","_callee2","videoElement","video","_context2","setupCamera","play","abrupt","_callee3","mobile","stream","errorMessage","_context3","width","height","mediaDevices","getUserMedia","audio","facingMode","undefined","srcObject","Promise","resolve","onloadedmetadata","alert","reject","setRef","_callee4","_context4","timeout","setTimeout","capture","_callee5","nose","poses","_context5","estimateSinglePose","keypoints","filter","keypoint","part","setState","position","y","x","fishStyle","transitionDuration","concat","toMirror","react__WEBPACK_IMPORTED_MODULE_7___default","createElement","className","playsInline","ref","style","src","Component","render","document","getElementById"],"mappings":"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","file":"static/js/main.36714bb5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport * as posenet from '@tensorflow-models/posenet';\n\nimport './style.css';\n\nconst IMAGE = 'https://aralroca.github.io/fishFollow-posenet-tfjs/fish.gif';\nconst MILLISECONDS = 500;\nconst imageScaleFactor = 0.5;\nconst outputStride = 16;\nconst flipHorizontal = true;\nconst maxVideoSize = 300;\nconst weight = 0.5;\nconst initialPosition = 40;\n\nclass App extends Component {\n  state = {\n    top: initialPosition,\n    left: initialPosition,\n    oldTop: initialPosition,\n    oldLeft: initialPosition\n  };\n\n  componentDidMount =  async () =>{\n    this.net = await posenet.load(weight);\n    this.initCapture();\n  }\n\n  isMobile = () => {\n    const isAndroid = /Android/i.test(navigator.userAgent);\n    const isiOS = /iPhone|iPad|iPod/i.test(navigator.userAgent);\n\n    return isAndroid || isiOS;\n  }\n\n  loadVideo = async (videoElement) => {\n    const video = await this.setupCamera(videoElement);\n\n    video.play();\n  \n    return video;\n  }\n\n  setupCamera =  async (videoElement) => {\n    videoElement.width = maxVideoSize;\n    videoElement.height = maxVideoSize;\n  \n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      const mobile = this.isMobile();\n      const stream = await navigator.mediaDevices.getUserMedia({\n        'audio': false,\n        'video': {\n          facingMode: 'user',\n          width: mobile ? undefined : maxVideoSize,\n          height: mobile ? undefined: maxVideoSize}\n      });\n      videoElement.srcObject = stream;\n  \n      return new Promise(resolve => {\n        videoElement.onloadedmetadata = () => {\n          resolve(videoElement);\n        };\n      });\n    } else {\n      const errorMessage = \"This browser does not support video capture, or this device does not have a camera\";\n      alert(errorMessage);\n      return Promise.reject(errorMessage);\n    }\n  }\n\n  setRef = async (videoElement) => {\n    this.videoElement = videoElement;\n  }\n\n  initCapture = () => {\n    this.timeout = setTimeout(this.capture, MILLISECONDS);\n  }\n\n  capture = async () => {\n    let nose;\n    if(!this.videoElement ||Â !this.net){\n      this.initCapture();\n      return;\n    }\n\n    if(!this.video && this.videoElement){\n      this.video = await this.loadVideo(this.videoElement);\n    }\n\n    const poses = await this.net\n      .estimateSinglePose(this.video, imageScaleFactor, flipHorizontal, outputStride)\n\n    if(poses && poses.keypoints){\n       nose = poses.keypoints.filter(keypoint => keypoint.part === 'nose')[0];\n    }\n    if(nose){\n      this.setState({\n        top: nose.position.y * 100 / maxVideoSize,\n        left: nose.position.x * 100 / maxVideoSize,\n        oldTop: this.state.top,\n        oldLeft: this.state.left,\n      })\n    }\n\n    this.initCapture();\n  }\n\n  render() {\n    const fishStyle = {\n      position: 'absolute',\n      transitionDuration: '2s',\n      top: `${this.state.top}%`,\n      left: `${this.state.left}%`,\n    };\n    const toMirror = this.state.oldLeft > this.state.left;\n\n    return (\n      <div className=\"fish-tank\">\n        <video className=\"video\" playsInline ref={this.setRef} />\n        <img width=\"200px\" style={fishStyle} className={toMirror ? 'mirror' : ''} src={IMAGE} />\n      </div>\n    );\n  }\n}\n\nrender(<App />, document.getElementById('root'));\n"],"sourceRoot":""}